// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/sreeks87/webpageinfo/pageinfo/domain"
	mock "github.com/stretchr/testify/mock"
)

// Parser is an autogenerated mock type for the Parser type
type Parser struct {
	mock.Mock
}

// ParseHead provides a mock function with given fields:
func (_m *Parser) ParseHead() (domain.Head, error) {
	ret := _m.Called()

	var r0 domain.Head
	if rf, ok := ret.Get(0).(func() domain.Head); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.Head)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseHtmlVersion provides a mock function with given fields:
func (_m *Parser) ParseHtmlVersion() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseLinks provides a mock function with given fields: _a0
func (_m *Parser) ParseLinks(_a0 string) (domain.Links, error) {
	ret := _m.Called(_a0)

	var r0 domain.Links
	if rf, ok := ret.Get(0).(func(string) domain.Links); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Links)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParsePage provides a mock function with given fields: _a0
func (_m *Parser) ParsePage(_a0 string) (domain.Pageinfo, error) {
	ret := _m.Called(_a0)

	var r0 domain.Pageinfo
	if rf, ok := ret.Get(0).(func(string) domain.Pageinfo); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Pageinfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseTitle provides a mock function with given fields:
func (_m *Parser) ParseTitle() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
